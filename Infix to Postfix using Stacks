#include<stdio.h>
#include<ctype.h>
#include<string.h>
#define SIZE 50
char ch[SIZE];
int top=-1;
void push(char item){
        if(top>=SIZE){
                printf("STACK IS OVERFLOWN\n");
        }
        else{
                ch[++top]=item;

        }
}
char pop(){
        if(top==-1){
                printf("stack is underflow\n");
        }
        else{
                char a=ch[top];
                top--;
                return a;
        }
}
int is_operator(char item){
        if(item == '+' || item == '-' || item == '*' || item == '/' ||item == '%' || item == '^')
                return 1;
        else
                 return 0;
}
int precedence(char item){
        if(item == '%' || item == '^')
                return 3;
        else if(item == '*' || item == '/')
                return 2;
        else if(item == '+' || item == '-')
                return 1;
        else
                return 0;
}
void infix_to_postfix(char* infix, char* postfix){
        push('(');
        strcat(infix,")");
        int i=0,j=0;
        char item = infix[0];
        while(item!='\0'){
                if(item == '('){
                        push(item);
                }
                else if(isdigit(item) || isalpha(item)){
                                postfix[j++]=item;

                }
                else if(is_operator(item)==1){
                        char x= pop();
                       while(is_operator(x) == 1 && precedence(x) > precedence(item){   
                            postfix[j++] = x;
                                x = pop();
                        }
                        push(x);
                        push(item);
                }
                else if(item == ')'){
                        char x = pop();
                        while(x != '('){
                                postfix[j++] = x;
                                x=pop();
                        }
                }
                else;
                item = infix[++i];
        }
        postfix[++j] = '\0';
}



void main(){
        char postfix[SIZE], infix[SIZE];
        printf("enter infix expression :");
        gets(infix);
        infix_to_postfix(infix,postfix);
        printf("postfix expression is");
        puts(postfix);
}
